name: End to End Tests

on: [push, pull_request]

jobs:
  test-e2e:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Start database
        run: docker compose --env-file .env.test.e2e.docker -f docker-compose.test.yml up -d db-test

      - name: Wait for database to be ready
        run: |
          until docker compose --env-file .env.test.e2e.docker -f docker-compose.test.yml exec -T db-test pg_isready -U postgres | grep "accepting connections"; do
            echo "Waiting for database to be ready..."
            sleep 2
          done
        timeout-minutes: 1

      - name: Run E2E tests
        run: |
          npm run test:e2e:docker
        env:
          POSTGRES_PASSWORD: alwayssunny
          DATABASE_URL: postgres://postgres:alwayssunny@localhost:5432/weather_db_test
          WEATHER_API_KEY: 5d458fa571c848659f892351252506  # TODO: Replace with ${{ secrets.WEATHER_API_KEY }} after moving to GitHub Secrets
          RESEND_API_KEY: re_2p9UeLrX_JqFPbkAYmLvYjobPBqe6aNhf  # TODO: Replace with ${{ secrets.RESEND_API_KEY }} after moving to GitHub Secrets
          FROM_EMAIL: skyfetch@resend.dev
          BASE_URL: http://backend-test:3000
          BACKEND_PORT: 3000
          DB_HOST: localhost
          DB_PORT: 5432
          DB_NAME: weather_db_test
          DB_USER: postgres
          DB_PASS: alwayssunny
          DB_DIALECT: postgres

      - name: Debug logs on failure
        if: failure()
        run: |
          docker compose -f docker-compose.test.yml logs db-test
          docker compose -f docker-compose.test.yml logs backend-test
          docker compose -f docker-compose.test.yml logs test-e2e
      - name: Cleanup Docker Compose
        if: always()
        run: |
          docker stop db-test || true
          docker rm db-test || true
          docker compose -f docker-compose.test.yml down -v || true