name: End to End Tests

on: [push, pull_request]

jobs:
  test-e2e:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'

      - name: Install dependencies
        run: npm ci

      - name: Install Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/v2.24.6/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker compose version
      - name: Start database for E2E
        run: |
          docker compose -f docker-compose.test.yml up --build db-test
          echo "Waiting for container to start..."
          sleep 5
          # Check if container is running
          if docker ps | grep -q db-test; then
            echo "db-test container is running"
          else
            echo "ERROR: db-test container is not running"
            docker ps -a
            docker logs db-test
            exit 1
          fi
      - name: Wait for Database
        run: |
          echo "Waiting for PostgreSQL to be ready..."
          for i in {1..30}; do
            if docker compose -f docker-compose.test.yml exec -T db-test pg_isready -U postgres; then
              echo "Database is ready!"
              break
            fi
            echo "Attempt $i: Database not ready, waiting..."
            sleep 3
          done
          docker compose -f docker-compose.test.yml exec -T db-test pg_isready -U postgres || { echo "Database failed to start"; docker compose -f docker-compose.test.yml logs db-test; exit 1; }
      - name: Initialize Database
        run: |
          echo "Running database migrations..."
          npm run migrate
        env:
          DATABASE_URL: postgres://postgres:alwayssunny@localhost:5432/weather_db_test
          DB_HOST: localhost
          DB_PORT: 5432
          DB_NAME: weather_db_test
          DB_USER: postgres
          DB_PASS: alwayssunny
          DB_DIALECT: postgres
      - name: Run E2E tests
        run: |
          npm run test:e2e:docker
        env:
          POSTGRES_PASSWORD: alwayssunny
          DATABASE_URL: postgres://postgres:alwayssunny@localhost:5432/weather_db_test
          WEATHER_API_KEY: 5d458fa571c848659f892351252506  # TODO: Replace with ${{ secrets.WEATHER_API_KEY }} after moving to GitHub Secrets
          RESEND_API_KEY: re_2p9UeLrX_JqFPbkAYmLvYjobPBqe6aNhf  # TODO: Replace with ${{ secrets.RESEND_API_KEY }} after moving to GitHub Secrets
          FROM_EMAIL: skyfetch@resend.dev
          BASE_URL: http://backend-test:3000
          BACKEND_PORT: 3000
          DB_HOST: localhost
          DB_PORT: 5432
          DB_NAME: weather_db_test
          DB_USER: postgres
          DB_PASS: alwayssunny
          DB_DIALECT: postgres

      - name: Debug logs on failure
        if: failure()
        run: |
          docker compose -f docker-compose.test.yml logs db-test
          docker compose -f docker-compose.test.yml logs backend-test
          docker compose -f docker-compose.test.yml logs test-e2e
      - name: Cleanup Docker Compose
        if: always()
        run: |
          docker stop db-test || true
          docker rm db-test || true
          docker compose -f docker-compose.test.yml down -v || true