name: E2E Tests
on:
  push:
  pull_request:

jobs:
  e2e-tests:
    runs-on: ubuntu-latest
    environment: test
    env:
      NODE_ENV: test
      BASE_URL: http://backend-test:3000
      BACKEND_PORT: 3000
      DB_HOST: db-test
      DB_PORT: 5432
      DB_NAME: skyfetch_test
      DB_USER: skyfetch_test_user
      DB_PASSWORD: skyfetch_test_pass
      DATABASE_URL: postgresql://skyfetch_test_user:skyfetch_test_pass@db-test:5432/skyfetch_test?schema=public
      WEATHER_API_KEY: ${{ secrets.WEATHER_API_KEY }}
      RESEND_API_KEY: ${{ secrets.RESEND_API_KEY }}
      POSTGRES_USER: skyfetch_test_user
      POSTGRES_PASSWORD: skyfetch_test_pass
      POSTGRES_DB: skyfetch_test
    steps:
      - uses: actions/checkout@v4
      - name: Install Dependencies
        run: npm ci
      - name: Install Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/v2.24.5/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose --version
      - name: Start Test Database
        run: docker compose -f docker-compose.test.yml up -d db-test
      - name: Wait for Database
        run: |
          echo "Waiting for PostgreSQL to be ready..."
          for i in {1..30}; do
            if docker exec db-test pg_isready -U $POSTGRES_USER -d $POSTGRES_DB; then
              echo "Database is ready!"
              break
            fi
            echo "Attempt $i: Database not ready, waiting..."
            sleep 2
          done
          docker exec db-test pg_isready -U $POSTGRES_USER -d $POSTGRES_DB || { echo "Database failed to start"; docker logs db-test; exit 1; }
      - name: Run E2E Tests in Docker
        run: npm run test:e2e:docker
      - name: Cleanup
        if: always()
        run: docker compose -f docker-compose.test.yml down --volumes 