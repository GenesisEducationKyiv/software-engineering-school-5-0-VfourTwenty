name: Integration Tests

on: [push, pull_request]

defaults:
  run:
    working-directory: monolith

jobs:
  test-integration:
    runs-on: ubuntu-latest
    env:
      REDIS_PORT: 6379
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Start database
        run: docker compose -f docker-compose.test.yml up -d db-test

      - name: Wait for database to be ready
        run: |
          until docker compose --env-file .env.test.intgr.docker -f docker-compose.test.yml exec -T db-test pg_isready -U postgres | grep "accepting connections"; do
            echo "Waiting for database to be ready..."
            sleep 2
          done
          echo "Database is ready. Listing available databases before creation:"
          docker compose --env-file .env.test.intgr.docker -f docker-compose.test.yml exec -T db-test psql -U postgres -l
          echo "Creating test database if it does not exist..."
          docker compose --env-file .env.test.intgr.docker -f docker-compose.test.yml exec -T db-test psql -U postgres -d postgres -c "SELECT 1 FROM pg_database WHERE datname='weather_db_test';" | grep -q "1" || docker compose --env-file .env.test.e2e.docker -f docker-compose.test.yml exec -T db-test psql -U postgres -d postgres -c "CREATE DATABASE weather_db_test;"
          echo "Listing available databases after creation:"
          docker compose --env-file .env.test.intgr.docker -f docker-compose.test.yml exec -T db-test psql -U postgres -l
        timeout-minutes: 1

      - name: Run Integration Tests
        run: |
          npm run test:integration:docker

      - name: Debug logs on failure
        if: failure()
        run: |
          docker compose -f docker-compose.test.yml logs db-test
          docker compose -f docker-compose.test.yml logs test-integration
      - name: Cleanup Docker Compose
        if: always()
        run: |
          docker stop db-test || true
          docker rm db-test || true
          docker compose -f docker-compose.test.yml down -v || true